/*
1.Consider a C program in which the following commands are given at the beginning:
pid1=fork();;  
if (pid1!=0) { 
     pid2=fork();; pid2=fork(); pid2=fork(); pid2=fork() 
     pid3=fork();; pid3=fork()?
     }
else { 
    pid4=fork(); 
    if (pid4==0) { 
        pid5=fork();; 
        } 
    }
...............................
How many processes were generated by the previous commands? What is the "affinity" between them? Explain
briefly how the above processes were generated (step/instruction by step/instruction, which fork was used to create the
each one / which pid corresponds to each one, etc.). Also provide a schematic showing clearly the
hierarchy between the above processes. 

Answer :
In the above program, before any fork() is executed, a process is already running, let's call it parent process.  
Then, pid1 = fork(); is executed, i.e. a new process is created, let's call it p1.
The first if case (if (pid1!=0)) checks if the created process p1 returns a value other than 0, i.e.
the case where this process is not a child of its parent. It is worth noting if a value of -1 is returned, i.e. the case where there is an error, the following 
the same if case, whenever not all corner cases are checked.

So in the first if case, we check if process p1 is not a child. If this is true, then a process is created with pi2 = fork(), let's call it p2
and p2 creates another one p3 from pid3 = fork(). But by its nature, fork() creates a child process and its parent process does
what the child process does. Therefore, the parent process will create a process named p4 since it will do what the
p2 since they run roughly in parallel.

In the else case it is checked that the parent has a child named p1 from the first fork(), so the processes that will be created now are related to the p1 process 
and not the parent. Then, another fork() is done (pid4 = fork()) where p1 creates a child named p5. 
The if statement ( if (pid4 ==0) ) checks if the process created by p5 is its child. If it is, then a final process is created
by pid5 = fork() and thus completes the process tree.

The relatedness between them is, parent has child p1, grandchild p5 and great-grandchild p6.
Also the parent has child p2 and grandchild p3.
Finally, the parent has a child p4.
In total there are 7 processes running.




*/
